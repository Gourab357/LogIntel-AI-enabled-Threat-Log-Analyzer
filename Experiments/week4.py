# -*- coding: utf-8 -*-
"""Week4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dOnhKf5nV4u2JAOI2LRzppwYEpNff6L4
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from scipy.stats import entropy
import matplotlib.pyplot as plt

# For inline plotting in Colab
# %matplotlib inline

# 1. Load and parse timestamps
df = pd.read_csv('/content/drive/MyDrive/LLM4Sec/Week4/BGL_Logs_Chunk.csv', parse_dates=['Detailed_Timestamp'],
                 date_parser=lambda x: pd.to_datetime(x, format='%Y-%m-%d-%H.%M.%S.%f'))
df = df.set_index('Detailed_Timestamp').sort_index()

# 2. Define window
window = '1T'  # 1‑minute windows

# 3. Sessional features
event_rate    = df.resample(window).size().rename('event_rate')
unique_hosts  = df['Location1'].resample(window).nunique().rename('unique_hosts')
error_ratio   = (df['Severity'].isin(['ERROR', 'FATAL'])
                 .resample(window).mean()).rename('error_ratio')

# 4. Temporal features
ia_times   = df.index.to_series().diff().dt.total_seconds()
cv_ia      = (ia_times.rolling(60).std() / ia_times.rolling(60).mean())
cv_ia_min  = cv_ia.resample(window).mean().rename('interarrival_cv')

# 5. Statistical features
# Message entropy per window
def shannon(s):
    freqs = s.value_counts(normalize=True)
    return entropy(freqs, base=2)

msg_entropy = df['Message'].resample(window).apply(shannon).rename('msg_entropy')

# Host (IP) entropy per window
host_entropy = df['Location1'].resample(window).apply(shannon).rename('host_entropy')

# Facility entropy per window
fac_entropy = df['Facility'].resample(window).apply(shannon).rename('fac_entropy')

# 6. Combine features
features = pd.concat([
    event_rate, unique_hosts, error_ratio,
    cv_ia_min, msg_entropy, host_entropy, fac_entropy
], axis=1).fillna(0)

features.to_csv('/content/drive/MyDrive/LLM4Sec/Week4/features.csv', index=False)

# 7. Plot trends
for col in features.columns:
    plt.figure()
    features[col].plot(title=col)
    plt.ylabel(col)

# 8. Correlation heatmap
plt.figure(figsize=(6, 5))
corr = features.corr()
plt.imshow(corr, cmap='coolwarm', vmin=-1, vmax=1)
plt.xticks(range(len(corr)), corr.columns, rotation=90)
plt.yticks(range(len(corr)), corr.columns)+3
plt.colorbar(label='Correlation')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import entropy

# For inline plotting in Colab
# %matplotlib inline

# 1. Load and parse timestamps
df = pd.read_csv('/content/drive/MyDrive/LLM4Sec/Week4/BGL_Logs_Chunk.csv',
                 parse_dates=['Detailed_Timestamp'],
                 date_parser=lambda x: pd.to_datetime(x, format='%Y-%m-%d-%H.%M.%S.%f'))
df = df.set_index('Detailed_Timestamp').sort_index()

# 2. Label events: normal vs anomalous
df['is_anomaly'] = df['Alert_Tag'] != '-'

# 3. Define window
window = '1T'  # 1‑minute windows

# 4. Compute features per window
features = pd.DataFrame()
features['event_rate']      = df.resample(window).size()
features['unique_hosts']    = df['Location1'].resample(window).nunique()
features['error_ratio']     = df['Severity'].isin(['ERROR', 'FATAL']) \
                                 .resample(window).mean()

# Inter‐arrival CV
ia = df.index.to_series().diff().dt.total_seconds()
features['interarrival_cv'] = (ia.rolling(60).std() /
                               ia.rolling(60).mean()) \
                              .resample(window).mean()

# Entropy function
def shannon(s):
    freqs = s.value_counts(normalize=True)
    return entropy(freqs, base=2)

features['msg_entropy']     = df['Message'].resample(window).apply(shannon)
features['host_entropy']    = df['Location1'].resample(window).apply(shannon)

# 4. Label windows: any anomaly in window
anom_counts = df['is_anomaly'].resample(window).sum()
features['anomaly_count']   = anom_counts
features['label']           = features['anomaly_count'] > 0

# 5. Drop windows with no events if desired
# features = features[features['event_rate'] > 0]

# 6. Visualize distributions per class
for col in ['event_rate', 'unique_hosts', 'error_ratio',
            'interarrival_cv', 'msg_entropy', 'host_entropy']:
    plt.figure()
    features.boxplot(column=col, by='label')
    plt.title(f'{col} by Window Label')
    plt.suptitle('')
    plt.xlabel('Anomalous Window?')
    plt.ylabel(col)
    plt.show()

# 7. Display feature summary by class
print("Summary statistics by label:")
print(features.groupby('label').describe())

