# -*- coding: utf-8 -*-
"""week5.1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ucp3qRYLECI5MeIPkrdYpS5J_gwXYUxm
"""

import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/LLM4Sec/Week4/BGL_log.csv")

import re
from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS
def clean_text(text):
    text = str(text).lower()
    text = re.sub(r'[^a-z0-9\s]', ' ', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text
df['clean_msg'] = df['Message'].apply(clean_text)

"""Code to Find Keyword Overlap Across Alert Tags"""

from sklearn.feature_extraction.text import TfidfVectorizer
from collections import defaultdict
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Collect top N keywords for each Alert_Tag
N = 15
tag_keywords = {}
tfidf = TfidfVectorizer(stop_words='english', max_features=3000)

for tag in df['Alert_Tag'].unique():
    msgs = df[df['Alert_Tag'] == tag]['clean_msg']
    if len(msgs) < 2:
        continue  # skip tiny groups
    X = tfidf.fit_transform(msgs)
    mean_scores = X.mean(axis=0).A1
    top_idx = mean_scores.argsort()[::-1][:N]
    words = [tfidf.get_feature_names_out()[i] for i in top_idx]
    tag_keywords[tag] = set(words)

# 2. Show overlap between tags as a matrix
tags = list(tag_keywords.keys())
overlap_matrix = []
for tag1 in tags:
    row = []
    for tag2 in tags:
        overlap = len(tag_keywords[tag1] & tag_keywords[tag2])
        row.append(overlap)
    overlap_matrix.append(row)

plt.figure(figsize=(10,8))
sns.heatmap(overlap_matrix, annot=True, fmt="d", xticklabels=tags, yticklabels=tags, cmap='Blues')
plt.title(f'Keyword Overlap Between Alert Tags (Top {N} Keywords)')
plt.xlabel('Alert Tag')
plt.ylabel('Alert Tag')
plt.show()

"""####Visualize unique vs. shared keywords:"""

from matplotlib_venn import venn2
# Example: compare "APPREAD" and "KERNDTLB"
venn2([tag_keywords["APPREAD"], tag_keywords["KERNDTLB"]], set_labels=("APPREAD", "KERNDTLB"))
plt.show()

"""####Wordclouds for top words per tag:"""

from wordcloud import WordCloud
for tag, words in tag_keywords.items():
    wc = WordCloud(width=400, height=200).generate(' '.join(words))
    plt.figure(); plt.imshow(wc); plt.title(tag); plt.axis('off')
    plt.show()

"""###SHAP Explainability"""

!pip install shap

# Example (skip if already fit):
clf.fit(features, labels)

!pip install shap

import shap

# Fit your classifier as before
# clf.fit(features, labels)

explainer = shap.TreeExplainer(clf)
shap_values = explainer.shap_values(features)

# SHAP summary plot
shap.summary_plot(shap_values, features, feature_names=feature_names)